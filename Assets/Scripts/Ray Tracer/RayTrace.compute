#pragma kernel CSMain

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

RWTexture2D<float4> Result;
Texture2D<float4> Skybox;
float4x4 CameraToWorld;
float4x4 InverseProjection;
SamplerState sampler_Skybox;
float4 DirectionalLight;
float3 DefaultAlbedo;
float3 DefaultSpecular;
float3 DefaultShadow;
float2 PixelOffset;
int ReflectAmount;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float3 normal;
    float3 albedo;
    float3 specular;
    float distance;
};

struct Sphere
{
    float3 position;
    float3 albedo;
    float3 specular;
    float radius;
};

struct Mesh
{
    float4x4 localToWorld;
    float3 position;
    float3 albedo;
    float3 specular;
    float radius;
    int indices_offset;
    int indices_count;
};

StructuredBuffer<Sphere> Spheres;
StructuredBuffer<Mesh> Meshes;
StructuredBuffer<float3> Vertices;
StructuredBuffer<int> Indices;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1); // denotes reflection color strength
    return ray;
}

Ray CreateCamRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(InverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0, 0, 0);
    hit.normal = float3(0, 0, 0);
    hit.distance = 1.#INF;
    return hit;
}

// inout to modify original hit passed in to closest one
void GetGroundIntersection(Ray ray, inout RayHit closest)
{
    float t = -ray.origin.y / ray.direction.y;

    if (t > 0 && t < closest.distance)
    {
        closest.position = ray.origin + t * ray.direction;
        closest.normal = float3(0, 1, 0);
        closest.distance = t;
        closest.albedo = DefaultAlbedo;
        closest.specular = DefaultSpecular;
    }
}

// sphere: xyz = pos, w = radius
void GetSphereIntersection(Ray ray, inout RayHit closest, Sphere sphere)
{
    // Calculate distance to where the sphere intersects with the ray
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    
    // no intersection
    if (p2sqr < 0)
    {
        return;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    if (t > 0 && t < closest.distance)
    {
        closest.position = ray.origin + t * ray.direction;
        closest.normal = normalize(closest.position - sphere.position);
        closest.distance = t;
        closest.albedo = sphere.albedo;
        closest.specular = sphere.specular;
    }
}

bool TestSphereIntersection(Ray ray, RayHit closest, float3 position, float radius)
{
    float3 d = ray.origin - position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + radius * radius;
    
    if (p2sqr < 0)
    {
        return false;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

    return t > 0 && t < closest.distance;
}

bool GetTriangleIntersection(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v)
{
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);

    // use backface culling
    if (det < EPSILON)
    {
        return false;
    }

    float inv_det = 1.0f / det;
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;
    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * inv_det;

    if (u < 0.0 || u > 1.0f)
    {
        return false;
    }

    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    // calculate V parameter and test bounds
    v = dot(ray.direction, qvec) * inv_det;

    if (v < 0.0 || u + v > 1.0f)
    {
        return false;
    }

    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;
    return true;
}

void GetMeshIntersection(Ray ray, inout RayHit closest, Mesh mesh)
{
    // Ray not in bounding sphere
    if (!TestSphereIntersection(ray, closest, mesh.position, mesh.radius))
    {
        return;
    }

    uint offset = mesh.indices_offset;
    uint count = offset + mesh.indices_count;

    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(mesh.localToWorld, float4(Vertices[Indices[i]], 1))).xyz;
        float3 v1 = (mul(mesh.localToWorld, float4(Vertices[Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(mesh.localToWorld, float4(Vertices[Indices[i + 2]], 1))).xyz;
        float t, u, v;

        // use previous texture sample depending on t
        if (GetTriangleIntersection(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < closest.distance)
            {
                closest.distance = t;
                closest.position = float3(u, v, 1 - u - v);
                closest.normal = normalize(cross(v1 - v0, v2 - v0));
                closest.albedo = mesh.albedo;
                closest.specular = mesh.specular;
            }
        }
    }
}

RayHit Trace(Ray ray)
{
    RayHit closest = CreateRayHit();
    GetGroundIntersection(ray, closest);

    uint count, stride, i;
    Spheres.GetDimensions(count, stride);

    for (i = 0; i < count; i++)
    {
        GetSphereIntersection(ray, closest, Spheres[i]);
    }

    Meshes.GetDimensions(count, stride);
    for (i = 0; i < count; i++)
    {
        GetMeshIntersection(ray, closest, Meshes[i]);
    }

    return closest;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);

        // if a ray returning to the light from the surface is blocked, draw a shadow
        if (shadowHit.distance != 1.#INF)
        {
            return DefaultShadow;
        }

        ray.origin = hit.position + hit.normal * 0.001f; // avoid floating point error
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;

        return saturate(-dot(hit.normal, DirectionalLight.xyz)) * DirectionalLight.w * hit.albedo;
    }
    else
    {
        ray.energy = 0.0f; // No hit

        // Sample the skybox;
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return Skybox.SampleLevel(sampler_Skybox, float2(phi, theta), 0).xyz; 
    }
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    Ray ray = CreateCamRay(uv);
    float3 result = float3(0, 0, 0);

    for(int i = 0; i < ReflectAmount; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit); // Shade updates energy

        if (!any(ray.energy))
        {
            break;
        }
    }

    Result[id.xy] = float4(result, 1);
}
